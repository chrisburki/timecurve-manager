openapi: 3.0.1
info:
  title: Time Curve
  description: ' Time curve service is a service to managing balance curves. It provides
  * multi curve per object
  * labeling of each curve
  * seamless behaviour of the curve over time
  * fast horizontal scalable putting of events (changes of he curve)
  * fast querying
  * multi dimensional dates per curve'
tags:
- name: timecurve
  description: Everything about your timecurves
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to timecurvestore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /timecurve:
    put:
      tags:
      - timecurve
      summary: Update an existing timecurve
      operationId: updatetimecurve
      requestBody:
        description: timecurve object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timecurve'
          application/xml:
            schema:
              $ref: '#/components/schemas/timecurve'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: timecurve not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - timecurvestore_auth:
        - write:timecurves
        - read:timecurves
    post:
      tags:
      - timecurve
      summary: Add a new timecurve to the store
      operationId: addtimecurve
      requestBody:
        description: timecurve object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timecurve'
          application/xml:
            schema:
              $ref: '#/components/schemas/timecurve'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - timecurvestore_auth:
        - write:timecurves
        - read:timecurves
  /timecurve/findByStatus:
    get:
      tags:
      - timecurve
      summary: Finds timecurves by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findtimecurvesByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/timecurve'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/timecurve'
        400:
          description: Invalid status value
          content: {}
      security:
      - timecurvestore_auth:
        - write:timecurves
        - read:timecurves
  /timecurve/findByTags:
    get:
      tags:
      - timecurve
      summary: Finds timecurves by tags
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: findtimecurvesByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/timecurve'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/timecurve'
        400:
          description: Invalid tag value
          content: {}
      deprecated: true
      security:
      - timecurvestore_auth:
        - write:timecurves
        - read:timecurves
  /timecurve/{timecurveId}:
    get:
      tags:
      - timecurve
      summary: Find timecurve by ID
      description: Returns a single timecurve
      operationId: gettimecurveById
      parameters:
      - name: timecurveId
        in: path
        description: ID of timecurve to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/timecurve'
            application/json:
              schema:
                $ref: '#/components/schemas/timecurve'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: timecurve not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - timecurve
      summary: Updates a timecurve in the store with form data
      operationId: updatetimecurveWithForm
      parameters:
      - name: timecurveId
        in: path
        description: ID of timecurve that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the timecurve
                status:
                  type: string
                  description: Updated status of the timecurve
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - timecurvestore_auth:
        - write:timecurves
        - read:timecurves
    delete:
      tags:
      - timecurve
      summary: Deletes a timecurve
      operationId: deletetimecurve
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: timecurveId
        in: path
        description: timecurve id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: timecurve not found
          content: {}
      security:
      - timecurvestore_auth:
        - write:timecurves
        - read:timecurves
  /timecurve/{timecurveId}/uploadImage:
    post:
      tags:
      - timecurve
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: timecurveId
        in: path
        description: ID of timecurve to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - timecurvestore_auth:
        - write:timecurves
        - read:timecurves
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns timecurve inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a timecurve
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the timecurve
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of timecurve that needs to be fetched
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        timecurveId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    timecurve:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: timecurve status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: timecurve
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    timecurvestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://timecurvestore.swagger.io/oauth/dialog
          scopes:
            write:timecurves: modify timecurves in your account
            read:timecurves: read your timecurves
    api_key:
      type: apiKey
      name: api_key
      in: header
